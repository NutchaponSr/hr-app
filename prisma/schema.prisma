// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String?
  emailVerified   Boolean
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            UserRole  @default(USER)
  username        String
  displayUsername String?
  banned          Boolean?  @default(false)
  banReason       String?
  banExpires      DateTime?

  accounts Account[]
  sessions Session[]

  employee Employee @relation(fields: [username], references: [id], onDelete: Cascade)

  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

enum Division {
  SAT
  ICP2
  SAA
  SFT1
  SBM
  SFT3
  SFT2
  SBM_AUTO
  SDS
  ICP1
  SBM_NON_AUTO
  COMMERCIAL
}

enum Position {
  President
  MD
  VP
  GM
  AGM
  MGR
  SMGR
  Chief
  Foreman
  Staff
  Worker
  Officer
}

enum App {
  BONUS
  MERIT
}

model Employee {
  id         String   @id @db.VarChar(10)
  fullName   String
  email      String?  @unique
  position   String
  division   Division
  level      Position
  rank       Position
  department String

  user User?

  kpiForms   KpiForm[]
  meritForms MeritForm[]
  comments   Comment[]
  preparer   Task[]      @relation("preparer")
  checker    Task[]      @relation("checker")
  approver   Task[]      @relation("approver")

  @@map("employee")
}

enum Project {
  PROJECT
  IMPROVEMENT
}

enum Status {
  NOT_STARTED
  IN_DRAFT
  PENDING_CHECKER
  REJECTED_BY_CHECKER
  PENDING_APPROVER
  REJECTED_BY_APPROVER
  APPROVED
}

enum Period {
  IN_DRAFT
  EVALUATION_1ST
  EVALUATION_2ND
}

model Comment {
  id      String @id @default(uuid())
  taskId  String
  content String

  createdBy String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Task {
  id     String @id @default(uuid())
  type   App
  status Status @default(NOT_STARTED)

  preparedBy String
  checkedBy  String?
  approvedBy String

  preparedAt DateTime  @default(now())
  checkedAt  DateTime?
  approvedAt DateTime?
  updatedAt  DateTime  @updatedAt

  preparer Employee  @relation("preparer", fields: [preparedBy], references: [id], onDelete: Cascade)
  checker  Employee? @relation("checker", fields: [checkedBy], references: [id], onDelete: Cascade)
  approver Employee  @relation("approver", fields: [approvedBy], references: [id], onDelete: Cascade)

  kpiRecord   KpiRecord?
  meritRecord MeritRecord?
  comments    Comment[]

  @@map("task")
}

model KpiRecord {
  id        String   @id @default(uuid())
  taskId    String   @unique
  kpiFormId String
  period    Period
  createdAt DateTime @default(now())

  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  kpiForm KpiForm @relation(fields: [kpiFormId], references: [id], onDelete: Cascade)

  @@map("kpiRecord")
}

model KpiForm {
  id         String @id @default(uuid())
  employeeId String

  year        Int
  isEvaluated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  kpis       Kpi[]
  kpiRecords KpiRecord[]

  @@unique([year, isEvaluated, employeeId])
  @@index([year, isEvaluated, employeeId])
  @@map("kpiForm")
}

model KpiEvaluation {
  id     String @id @default(uuid())
  period Period

  actual      String
  achievement Int

  kpiId String
  kpi   Kpi    @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  @@map("kpiEvaluation")
}

model Kpi {
  id        String  @id @unique @default(cuid())
  name      String?
  weight    Int?
  objective String? @db.Text
  strategy  String?

  target100  String?  @db.Text
  target80   String?  @db.Text
  target90   String?  @db.Text
  target70   String?  @db.Text
  type       Project?
  definition String?  @db.Text
  method     String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kpiFormId String
  kpiForm   KpiForm @relation(fields: [kpiFormId], references: [id], onDelete: Cascade)

  kpiEvaluations KpiEvaluation[]

  @@map("kpis")
}

model MeritRecord {
  id          String   @id @default(uuid())
  taskId      String   @unique
  meritFormId String
  period      Period
  createdAt   DateTime @default(now())

  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  meritForm MeritForm @relation(fields: [meritFormId], references: [id], onDelete: Cascade)

  @@map("meritRecord")
}

model MeritForm {
  id         String @id @default(uuid())
  employeeId String

  year        Int
  isEvaluated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  meritRecords   MeritRecord[]
  cultureRecords CultureRecord[]
  competencyRecords CompetencyRecord[]

  @@unique([year, isEvaluated, employeeId])
  @@index([year, isEvaluated, employeeId])
  @@map("meritForm")
}

model CultureRecord {
  id String @id @default(uuid())
  cultureId Int 
  meritFormId String

  meritForm MeritForm @relation(fields: [meritFormId], references: [id], onDelete: Cascade)
  culture Culture  @relation(fields: [cultureId], references: [id], onDelete: Cascade)

  cultureEvaluations CultureEvaluation[]

  @@map("cultureRecord")
}

model CultureEvaluation {
  id            String  @id @default(uuid())
  cultureRecordId String 
  period        Period
  levelBehavior Int     @default(0)
  evidence      String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cultureRecord CultureRecord @relation(fields: [cultureRecordId], references: [id], onDelete: Cascade)

  @@map("cultureEvaluation")
}

model Culture {
  id          Int    @id @default(autoincrement())
  name        String @db.Text
  code        String @db.VarChar(1)
  description String @db.Text
  belief      Json?

  createdAt DateTime @default(now())
  cultureRecords CultureRecord[]

  @@map("culture")
}

enum CompetencyType {
  CC
  FC
  MC
  TC
}

model Competency {
  id                String             @id @default(cuid())
  name              String
  definition        String?
  t5                String?
  t4                String?
  t3                String?
  t2                String?
  t1                String?
  type              CompetencyType
  competencyRecords CompetencyRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("competency")
}

model CompetencyRecord {
  id               String  @id @default(uuid())
  competencyId     String?
  meritFormId      String
  weight           Int?
  input            String? @db.Text
  output           String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competency            Competency?  @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  meritForm MeritForm @relation(fields: [meritFormId], references: [id], onDelete: Cascade)
  competencyEvaluations CompetencyEvaluation[]

  @@map("competencyRecord")
}

model CompetencyEvaluation {
  id             String @id @default(uuid())
  period         Period
  inputEvidence  String @db.Text
  outputEvidence String @db.Text
  inputLevel     Int    @default(0)
  outputLevel    Int    @default(0)

  createdAt DateTime @default(now())

  competencyRecordId String
  competencyRecord   CompetencyRecord @relation(fields: [competencyRecordId], references: [id], onDelete: Cascade)

  @@map("competencyEvaluation")
}