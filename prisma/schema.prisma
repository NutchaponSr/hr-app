// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id String @id @default(uuid())
  name String
  email String?
  emailVerified Boolean
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role UserRole @default(USER)
  username String
  displayUsername String?
  banned Boolean? @default(false) 
  banReason String?
  banExpires DateTime?

  accounts Account[]
  sessions Session[]

  employee Employee @relation(fields: [username], references: [id], onDelete: Cascade)

  @@unique([username])
  @@map("user")
}

model Session {
  id String @id @default(uuid())
  expiresAt DateTime
  token String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  impersonatedBy String?

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id String @id @default(uuid())
  accountId String
  providerId String
  accessToken String?
  refreshToken String?
  idToken String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope String?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

enum Division {
  SAT
  ICP2
  SAA
  SFT1
  SBM
  SFT3
  SFT2
  SBM_AUTO
  SDS
  ICP1
  SBM_NON_AUTO
  COMMERCIAL
}

enum Position {
  President
  MD
  VP
  GM
  AGM
  MGR
  SMGR
  Chief
  Foreman
  Staff
  Worker
  Officer
}

enum App {
  KPI
}

model Employee {
  id String @id @db.VarChar(10)
  fullName String
  email String? @unique
  position String
  division Division
  level Position
  rank Position
  department String

  user User?
  kpiRecords KpiRecord[]
  meritRecords MeritRecord[]
  preparedApprovals Approval[] @relation("PreparedBy")
  checkedApprovals Approval[] @relation("CheckedBy")
  approvedApprovals Approval[] @relation("ApprovedBy")

  @@map("employee")
}

enum Project {
  PROJECT
  IMPROVEMENT
}

enum Strategy {
  POEPLE_CAPABILITY
  POEPLE_CONTINUITY
  POEPLE_EFFICIENCY
  OTHER
}

enum Status {
  NOT_STARTED
  IN_DRAFT
  PENDING_CHECKER
  REJECTED_BY_CHECKER
  PENDING_APPROVER
  REJECTED_BY_APPROVER
  APPROVED
  REVISION
}

model Kpi {
  id String @id @default(cuid()) @unique
  name String?
  weight Int?
  objective String? @db.Text
  strategy Strategy?

  target100 String? @db.Text
  target80 String? @db.Text
  target90 String? @db.Text
  target70 String? @db.Text
  type Project?
  definition String? @db.Text
  method String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kpiRecordId String
  kpiRecord KpiRecord @relation(fields: [kpiRecordId], references: [id], onDelete: Cascade)
  kpiResults KpiResult[]

  @@map("kpis")
}

model KpiRecord {
  id String @id @default(uuid())
  employeeId String
  year Int        
  kpis Kpi[]
  KpiEvaluations KpiEvaluation[]
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  merit MeritRecord?    
  status Status @default(IN_DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, year]) 
  @@map("kpiRecord")
}

model KpiResult {
  id String @id @default(uuid())
  kpiId String 
  kpi Kpi @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  period Int
  actual String
  achievement Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("kpiResult")
}

model KpiEvaluation {
  id String @id @default(uuid())
  kpiRecordId String 
  approvalId String @unique
  period Int

  kpiRecord KpiRecord @relation(fields: [kpiRecordId], references: [id], onDelete: Cascade)
  approval Approval @relation(fields: [approvalId], references: [id], onDelete: Cascade)

  @@unique([kpiRecordId, period])
  @@map("kpiEvaluation")
}

model Approval {
  id String @id @default(cuid())
  app App
  preparedBy String
  checkedBy String?
  approvedBy String

  prepareComment String? @db.Text
  approvComment String? @db.Text

  preparedAt DateTime @default(now())
  checkedAt DateTime?
  approvedAt DateTime?

  preparer Employee @relation("PreparedBy", fields: [preparedBy], references: [id], onDelete: Cascade)
  checker Employee? @relation("CheckedBy", fields: [checkedBy], references: [id], onDelete: SetNull)
  approver Employee @relation("ApprovedBy", fields: [approvedBy], references: [id], onDelete: Cascade)

  kpiEvaluation KpiEvaluation?

  @@map("approval")
}

model MeritRecord {
  id String @id @default(uuid())
  kpiRecordId String @unique
  employeeId String
  year Int

  kpiRecord KpiRecord @relation(fields: [kpiRecordId], references: [id]) 
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  meritEvaluations MeritEvaluation[]
  competencyRecord CompetencyRecord?
  cultureRecord CultureRecord?
  
  @@unique([employeeId, kpiRecordId, year])
  @@map("meritRecords")
}

model MeritEvaluation {
  id String @id @default(uuid())
  meritRecordId String
  period Int 
  remarksChecker String?
  remarksApprover String?
  preparedBy String
  checkedBy String?
  approvedBy String?
  preparedAt DateTime @default(now())
  checkedAt DateTime?
  approvedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  meritRecord MeritRecord @relation(fields: [meritRecordId], references: [id], onDelete: Cascade)
  
  @@unique([meritRecordId, period])
  @@map("meritEvaluations")
}

model CompetencyRecord {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  meritRecordId String @unique
  meritRecord MeritRecord @relation(fields: [meritRecordId], references: [id], onDelete: Cascade)
  
  competencyItem CompetencyItem[]
  @@map("competencyRecords")
}

model CompetencyItem {
  id String @id @default(cuid())
  competencyId String?
  competencyRecordId String
  weight Int?
  input String? @db.Text
  output String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competencyEvaluation CompetencyEvaluation[]
  competencyRecord CompetencyRecord @relation(fields: [competencyRecordId], references: [id], onDelete: Cascade)
  competency Competency? @relation(fields: [competencyId], references: [id])
  
  @@map("competencyItems")
}

model CompetencyEvaluation {
  id String @id @default(uuid())
  competencyItemId String
  inputEvidence String?
  outputEvidence String?
  inputLevel Int
  outputLevel Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  competencyItem CompetencyItem @relation(fields: [competencyItemId], references: [id], onDelete: Cascade)
  @@map("competencyEvaluation")
}

enum CompetencyType {
  CC
  FC
  MC
  TC
}

model Competency {
  id String @id
  name String
  definition String
  t5 String?
  t4 String?
  t3 String?
  t2 String?
  t1 String?
  type CompetencyType
  competency CompetencyItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("competency")
}

model CultureRecord {
  id String @id @default(uuid())
  period Int
  meritRecordId String @unique
  meritRecord MeritRecord @relation(fields: [meritRecordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cultureItems CultureItem[]

  @@map("cultureRecord")
}

model CultureItem {
  id String @id @default(cuid())
  code String @db.VarChar(1)
  levelBehavior Int @default(0)
  evidence String? @db.Text

  cultureRecordId String
  cultureRecord CultureRecord @relation(fields: [cultureRecordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cultureItem")
}